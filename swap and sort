struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){

struct ListNode* temp=list1,*temp1,*temp2,*head;

if(list1==NULL&&list2!=NULL)
return list2;
else if(list2==NULL&&list1!=NULL)
return list1;
else if(list1==NULL&&list2==NULL)
return NULL;
else{
	while(list1->next!=NULL){
		list1=list1->next;
	}
	list1->next=list2;
head=temp;
		for(temp1=temp;temp1->next!=NULL;temp1=temp1->next){
		for(temp2=temp1->next;temp2!=NULL;temp2=temp2->next){
			if(temp1->val>temp2->val){
			temp1->val=temp1->val+temp2->val;	
			temp2->val=temp1->val-temp2->val;
            temp1->val=temp1->val-temp2->val;
			}
			}
		}

        return head;}
}


 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* swapNodes(struct ListNode* head, int k){
    struct ListNode* temp,*p,*t;   
    int c=0,i=1,j=1;
    if (head == NULL)
    {
        return NULL;
    }
    else{
    temp = head;
    while (temp != NULL)
    {
        c++;
        temp = temp->next;
    }
     if(k>c)
    {
        printf("requested position not exit");
        return NULL;
    }
    else{
   
    p=head;
    t=head;
    while(i<k){
        p=p->next;
        i++;
    }
    while(j<(c-k+1)){
        t=t->next;
        j++;
    }
     if(k==c-k+1)
    {
        return head;
       }
    else{
    t->val=p->val+t->val;
    p->val=t->val-p->val;
    t->val=t->val-p->val;
    }
}
    }
return head;

}
